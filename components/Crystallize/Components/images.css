.crystallize-components-images {
  --grid-element-separation: 10px;
  display: grid;
  grid-template-columns: 1fr;
  grid-gap: var(--grid-element-separation);
}

/*
 * We use ">>>" instead of ">" because it's how vuejs understands
 * that we want to modify a child component
 *
 * FYI: https://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles
 */

 .crystallize-components-images__image,
 .crystallize-components-images__image >>> picture,
 .crystallize-components-images__image >>> img {
   display: block;
 }

 .crystallize-components-images__image >>> picture,
 .crystallize-components-images__image >>> img {
   height: 100%;
 }
 
 .crystallize-components-images__image {
   margin-bottom: 0;
 }
 
.crystallize-components-images__image >>> img {
  width: 100%;
  object-fit: cover;
}

@media (min-width: 768px) {
  .crystallize-components-images {
    --grid-columns-count: 2;
    /*
     * We create a grid with equal columns based on
     * the custom property "--grid-columns-count"
     */
    grid-template-columns: repeat(var(--grid-columns-count), 1fr);
  }
  
  /*
   * :only-child targets an element without any siblings
   * It does the same as `:first-child:last-child` and `:nth-child(1):nth-last-child(1)`
   * but with lower specifity, which reduces css accidental complexity.
   *
   * FYI: https://developer.mozilla.org/en-US/docs/Web/CSS/:only-child
   */
  .crystallize-components-images__image:only-child {
    /*
     * We force the first element to fill the first row.
     * If you modify the grid structure by adding columns,
     * make sure to update the line below.
     *
     * To make the first element fill the hole row do the following:
     * grid-column-end: span NUMBER_OF_COLUMNS;
     */
    grid-column-end: span var(--grid-columns-count);
  }
}